#!/bin/bash -eu

echo "---------------------------------------------------------------"
#对dataflow进行检测
if [ "$SANITIZER" = "dataflow" ] && [ "$FUZZING_ENGINE" != "dataflow" ]; then
  echo "ERROR: 'dataflow' sanitizer can be used with 'dataflow' engine only."
  exit 1
fi

if [ -z "${SANITIZER_FLAGS-}" ]; then
  FLAGS_VAR="SANITIZER_FLAGS_${SANITIZER}"
  export SANITIZER_FLAGS=${!FLAGS_VAR-}
fi

# 对架构判断，默认为x86_64
if [[ $ARCHITECTURE == "i386" ]]; then
    export CFLAGS="-m32 $CFLAGS"
    cp -R /usr/i386/lib/* /usr/lib
fi
#暂时取消在此处对工具进行编译，让工具在镜像中就编译好
#if [[ $FUZZING_ENGINE != "macke" ]]; then
  # compile script might override environment, use . to call it.
  # 在这里对对应的模糊工具进行了编译，所以是在Dockerfile还是compile_(_)里面就需要考虑了，但是为方便资源的话可以在Dockerfile里面直接编译好
#  . compile_${FUZZING_ENGINE}
#fi

# 当前可以忽略，下星期一定学模糊测试工具
if [[ $SANITIZER_FLAGS = *sanitize=memory* ]]
then
  # Take all libraries from lib/msan and MSAN_LIBS_PATH
  # export CXXFLAGS_EXTRA="-L/usr/msan/lib $CXXFLAGS_EXTRA"
  cp -R /usr/msan/lib/* /usr/lib/

  if [[ -z "${MSAN_LIBS_PATH-}" ]]; then
    echo 'WARNING: Building without MSan instrumented libraries.'
  else
    # Copy all static libraries only. Don't include .so files because they can
    # break non MSan compiled programs.
    (cd "$MSAN_LIBS_PATH" && find . -name '*.a' -exec cp --parents '{}' / ';')
  fi
fi

# Coverage flag overrides.
COVERAGE_FLAGS_VAR="COVERAGE_FLAGS_${SANITIZER}"
if [[ -n ${!COVERAGE_FLAGS_VAR+x} ]]
then
  export COVERAGE_FLAGS="${!COVERAGE_FLAGS_VAR}"
fi

 # Don't need coverage instrumentation for engine-less builds.
if [ $FUZZING_ENGINE = "none" ]; then
  export COVERAGE_FLAGS=
fi

#export CFLAGS="$CFLAGS $SANITIZER_FLAGS $COVERAGE_FLAGS"
#export CFLAGS="$CFLAGS $SANITIZER_FLAGS "

#export CXXFLAGS="$CFLAGS $CXXFLAGS_EXTRA"

##echo "CC=$CC"
##echo "CXX=$CXX"
#echo "CFLAGS=$CFLAGS"
#echo "CXXFLAGS=$CXXFLAGS"

echo "---------------------------------------------------------------"

# 在这里按理说应该是调用模糊工具的编译器对其进行编译
BUILD_CMD="bash -eux $SRC/build.sh"

# We need to preserve source code files for generating a code coverage report.
# We need exact files that were compiled, so copy both $SRC and $WORK dirs.
COPY_SOURCES_CMD="cp -rL --parents $SRC $WORK /usr/include $OUT"

if [ "${BUILD_UID-0}" -ne "0" ]; then
  adduser -u $BUILD_UID --disabled-password --gecos '' builder
  chown -R builder $SRC $OUT $WORK
  su -c "$BUILD_CMD" builder
  if [ "$SANITIZER" = "coverage" ]; then
    # Some directories have broken symlinks (e.g. honggfuzz), ignore the errors.
    su -c "$COPY_SOURCES_CMD" builder 2>/dev/null || true
  fi
#elif [ $FUZZING_ENGINE != "macke" ]
#  . macke_build
else
  $BUILD_CMD
  if [ "$SANITIZER" = "coverage" ]; then
    # Some directories have broken symlinks (e.g. honggfuzz), ignore the errors.
    $COPY_SOURCES_CMD 2>/dev/null || true
  fi
fi

if [[ "$FUZZING_ENGINE" = "dataflow" ]]; then
  # Remove seed corpus as it can be huge but is not needed for a dataflow build.
  rm -f $OUT/*.zip
fi
